{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"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","file":"keyboard-dd970efc-js-es5.js","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n    previousVisualViewport = {};\r\n    currentVisualViewport = {};\r\n    keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n    startNativeListeners(win);\r\n    if (!win.visualViewport) {\r\n        return;\r\n    }\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n    win.visualViewport.onresize = () => {\r\n        trackViewportChanges(win);\r\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n            setKeyboardOpen(win);\r\n        }\r\n        else if (keyboardDidClose(win)) {\r\n            setKeyboardClose(win);\r\n        }\r\n    };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n    win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\r\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n    fireKeyboardOpenEvent(win, ev);\r\n    keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n    fireKeyboardCloseEvent(win);\r\n    keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n    return (!keyboardOpen &&\r\n        previousVisualViewport.width === currentVisualViewport.width &&\r\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n    return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n        detail: { keyboardHeight }\r\n    });\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n    return {\r\n        width: Math.round(visualViewport.width),\r\n        height: Math.round(visualViewport.height),\r\n        offsetTop: visualViewport.offsetTop,\r\n        offsetLeft: visualViewport.offsetLeft,\r\n        pageTop: visualViewport.pageTop,\r\n        pageLeft: visualViewport.pageLeft,\r\n        scale: visualViewport.scale\r\n    };\r\n};\r\n\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"]}