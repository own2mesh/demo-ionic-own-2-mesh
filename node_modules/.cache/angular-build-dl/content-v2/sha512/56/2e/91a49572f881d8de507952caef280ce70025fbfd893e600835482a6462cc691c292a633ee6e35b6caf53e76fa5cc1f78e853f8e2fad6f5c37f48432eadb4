{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/shadow-css-c63963b5.js"],"names":["safeSelector","selector","placeholders","index","content","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","lastIndex","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"mappings":"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","file":"shadow-css-c63963b5-js-es5.js","sourcesContent":["/*\r\n Stencil Client Platform v1.17.3 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nconst safeSelector = (selector) => {\r\n    const placeholders = [];\r\n    let index = 0;\r\n    let content;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    const ss = {\r\n        content,\r\n        placeholders,\r\n    };\r\n    return ss;\r\n};\r\nconst restoreSafeSelector = (placeholders, content) => {\r\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const cssRule = {\r\n            selector,\r\n            content,\r\n        };\r\n        const rule = ruleCallback(cssRule);\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    const strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nconst insertPolyfillHostInCssText = (selector) => {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nconst convertColonRule = (cssText, regExp, partReplacer) => {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, (...m) => {\r\n        if (m[2]) {\r\n            const parts = m[2].split(',');\r\n            const r = [];\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nconst colonHostPartReplacer = (host, part, suffix) => {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nconst convertColonHost = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nconst colonHostContextPartReplacer = (host, part, suffix) => {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nconst convertColonSlotted = (cssText, slotScopeId) => {\r\n    const slotClass = '.' + slotScopeId + ' > ';\r\n    const selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n        if (m[2]) {\r\n            const compound = m[2].trim();\r\n            const suffix = m[3];\r\n            const slottedSelector = slotClass + compound + suffix;\r\n            let prefixSelector = '';\r\n            for (let i = m[4] - 1; i >= 0; i--) {\r\n                const char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            const orgSelector = prefixSelector + slottedSelector;\r\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n                selectors.push({\r\n                    orgSelector,\r\n                    updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors,\r\n        cssText,\r\n    };\r\n};\r\nconst convertColonHostContext = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nconst convertShadowDOMSelectors = (cssText) => {\r\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n};\r\nconst makeScopeMatcher = (scopeSelector) => {\r\n    const lre = /\\[/g;\r\n    const rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nconst selectorNeedsScoping = (selector, scopeSelector) => {\r\n    const re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        const replaceBy = `.${hostSelector}`;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\r\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                return before + replaceBy + colon + after;\r\n            });\r\n        })\r\n            .replace(_polyfillHostRe, replaceBy + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    const isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n    const className = '.' + scopeSelector;\r\n    const _scopeSelectorPart = (p) => {\r\n        let scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            const t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                const matches = t.match(/([^:]*)(:*)(.*)/);\r\n                if (matches) {\r\n                    scopedP = matches[1] + className + matches[2] + matches[3];\r\n                }\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    const safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    let scopedSelector = '';\r\n    let startIndex = 0;\r\n    let res;\r\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    let shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        const separator = res[1];\r\n        const part = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n        scopedSelector += `${scopedPart} ${separator} `;\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    const part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n    return selector\r\n        .split(',')\r\n        .map(shallowPart => {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n    return processRules(cssText, (rule) => {\r\n        let selector = rule.selector;\r\n        let content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        const cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    const slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const hostScopeId = scopeId + '-h';\r\n    const slotScopeId = scopeId + '-s';\r\n    const commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    const orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        const processCommentedSelector = (rule) => {\r\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n            const comment = `/*!@${rule.selector}*/`;\r\n            orgSelectors.push({ placeholder, comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, rule => {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(({ placeholder, comment }) => {\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach(slottedSelector => {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\n\r\nexport { scopeCss };\r\n"]}